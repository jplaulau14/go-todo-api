openapi: 3.1.0
info:
  title: Go Todo API
  version: 0.1.0
servers:
  - url: http://localhost:8080
paths:
  /healthz:
    get:
      responses:
        '200': { description: OK }
  /todos/:
    get:
      responses:
        '200':
          description: List todos
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Todo' }
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateTodoRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Todo' }
  /todos/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Todo' } } } }
        '404': { description: Not found }
    patch:
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateTodoRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Todo' } } } }
        '404': { description: Not found }
    delete:
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: No content }
        '404': { description: Not found }

components:
  schemas:
    Todo:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        completed: { type: boolean }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
      required: [id, title, completed, created_at, updated_at]
    CreateTodoRequest:
      type: object
      properties:
        title: { type: string }
      required: [title]
    UpdateTodoRequest:
      type: object
      properties:
        title: { type: string }
        completed: { type: boolean }

